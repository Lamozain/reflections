1. Now I can compare text files using windows or mac. 
2. Starting the course again to learn how to push commits 
and possibly access them.
3. Having access to version control could reduce my worries
and make sure I can go back to some earlier codes.
4. git diff oldcommitSHA newcommitSHA is useful for comparison.
5. Each commit should reflect a logical change.
6. Include README.txt file of your project in your repo describing
your project to those that may work on it. 
7. git log is useful to view commit history. It takes flags.
8. git checkout SHA ca be used to locate bugs in the programme
through sequential checking or keeping aside of commits and playing 
or running the programme.
9. I will like to use git for sharing my work with developers and
 to house my portfolio.
Lesson 2
Recall: git init for initializing repositories
	git status for getting repository's status
	ls -a for listing all files including dot files in a directory
	ls -l for listing files in a directory in a long form
10. git add to stage files to be commited
11. git reset to unstage files that were mistakenly staged
12. git commit to commit staged files
13. git branch easy_mode to make roids break into two not three.
14. branching because it is not a major change
15. committing because it is a logical change.
16. The branching to easy mode here makes it easy to create another 
unpopular version of our game.
17. git branch easy_mode creates the branch easy_mode
18. git checkout easy_mode moves into the branch easy_mode
19. After working on multiple branches, they can be merged but conflict may arise.
20. You can use yUML and gliffy for diagramming
21. git log -n 1 for seeing merges after merging.


